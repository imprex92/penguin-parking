import 'dart:io';
import 'package:penguin_parking/models/broom.dart';
import 'package:penguin_parking/utils/validator.dart';

import '../main.dart';

class BroomRepository {
  static final BroomRepository _instance = BroomRepository._internal();
  List<Broom> currentBrooms = [];

  factory BroomRepository() {
    return _instance;
  }

  bool addBroom(newBroom) {
    currentBrooms.add(newBroom);
    print(
        "Added! Plate number: ${newBroom.plateNumber} - Owner: ${newBroom.owner}");
    return true;
  }

  void removeBroom(plateNumber) {
    currentBrooms.removeWhere((element) => element.plateNumber == plateNumber);
    print('Broom with plate number $plateNumber removed!');
  }

  List<Broom> getAllBrooms() {
    return currentBrooms;
  }

  Broom getBroomAndUpdate(plateNumber) {
    Broom? broom =
        currentBrooms.singleWhere((x) => x.plateNumber == plateNumber);
    print('What would you like to update?');
    print('1. Brand (${broom.brand})');
    print('2. Type (${broom.type})');
    print('3. Model (${broom.model})');
    print('4. Exit');

    String? updateChoice = stdin.readLineSync();
    while (
        !inputValidation(input: updateChoice, expectedType: ExpectedType.int)) {
      print('Invalid input. Please enter a number between 1 and 4.');
      updateChoice = stdin.readLineSync();
    }

    switch (int.parse(updateChoice!)) {
      case 1:
        print('Enter the new brand:');
        String? newBrand = stdin.readLineSync();
        while (!inputValidation(
            input: newBrand, expectedType: ExpectedType.string)) {
          print('Invalid input. Please enter a valid brand.');
          newBrand = stdin.readLineSync();
        }
        broom.brand = newBrand!;
        print('Brand updated!');
        return broom;
      case 2:
        print('Enter the new type:');
        String? newType = stdin.readLineSync();
        while (!inputValidation(
            input: newType, expectedType: ExpectedType.string)) {
          print('Invalid input. Please enter a valid type.');
          newType = stdin.readLineSync();
        }
        broom.type = newType!;
        print('Type updated!');
        return broom;
      case 3:
        print('Enter the new model:');
        String? newModel = stdin.readLineSync();
        while (!inputValidation(
            input: newModel, expectedType: ExpectedType.string)) {
          print('Invalid input. Please enter a valid model.');
          newModel = stdin.readLineSync();
        }
        broom.model = newModel!;
        print('Model updated!');
        return broom;
      case 4:
        print('Goodbye!');
        exitCode = 0;
        break;
      default:
        print('Invalid input. Please enter a number between 1 and 4.');
        getBroomAndUpdate(plateNumber);
    }
    return broom;
  }

  void applyMockData() {
    try {
      currentBrooms = [
        Broom(
            plateNumber: 'ABC123',
            brand: 'Nimbus',
            type: 'Racing',
            model: '2000',
            owner: 194519929933),
        Broom(
            plateNumber: 'DEF456',
            brand: 'Firebolt',
            type: 'Racing',
            model: '2001',
            owner: 194519929934),
        Broom(
            plateNumber: 'GHI789',
            brand: 'Cleansweep',
            type: 'Cleansweep',
            model: '2001',
            owner: 194519929935),
        Broom(
            plateNumber: 'JKL012',
            brand: 'Nimbus',
            type: 'Racing',
            model: '2000',
            owner: 194519929936),
      ];
      print('Mock data applied to brooms!');
    } catch (e) {
      print('Something went wrong. Please try again.');
      whatToDoNext();
    }
  }

  BroomRepository._internal();
}

final BroomRepository broomRepository = BroomRepository();
