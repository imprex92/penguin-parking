import 'dart:io';
import 'package:penguin_parking/utils/validator.dart';
import '../models/parking_space.dart';

class ParkingSpaceRepository {
  static final ParkingSpaceRepository _instance =
      ParkingSpaceRepository._internal();
  List<ParkingSpace> parkingSpaces = [
    ParkingSpace(
      id: '1',
      address: '1234 Diagon Alley',
      hourPrice: 5,
    ),
    ParkingSpace(
      id: "2",
      address: '5678 Hogsmeade Lane',
      hourPrice: 1.5,
    ),
    ParkingSpace(
      id: "3",
      address: '91011 Privet Drive',
      hourPrice: 2,
    ),
  ];

  factory ParkingSpaceRepository() {
    return _instance;
  }

  bool addNewParkingSpace(ParkingSpace newParkingSpace) {
    parkingSpaces.add(newParkingSpace);
    print(
        'Added! Address: ${newParkingSpace.address} - Hourly price: \$${newParkingSpace.hourPrice}');
    return true;
  }

  void removeParkingSpace(String id) {
    parkingSpaces.removeWhere((element) => element.id == id);
    print('Parking space with id $id removed!');
  }

  List<ParkingSpace> getAllParkingSpaces() {
    return parkingSpaces;
  }

  ParkingSpace getParkingSpaceAndUpdate(String id) {
    ParkingSpace? parkingSpace = parkingSpaces.singleWhere((x) => x.id == id);
    print('What would you like to update?');
    print('1. Address (${parkingSpace.address})');
    print('2. Hourly price (\$${parkingSpace.hourPrice})');
    print('3. Both');
    print('4. Exit');

    String? updateChoice = stdin.readLineSync();
    while (
        !inputValidation(input: updateChoice, expectedType: ExpectedType.int)) {
      print('Invalid input. Please enter a number between 1 and 4.');
      updateChoice = stdin.readLineSync();
    }

    switch (int.parse(updateChoice!)) {
      case 1:
        print('Enter the new address:');
        String? newAddress = stdin.readLineSync();
        while (!inputValidation(
            input: newAddress, expectedType: ExpectedType.string)) {
          print('Invalid input. Please enter a valid address.');
          newAddress = stdin.readLineSync();
        }
        parkingSpace.address = newAddress!;
        print('Address updated!');
        return parkingSpace;
      case 2:
        print('Enter the new hourly price in \$ (USD. ex: 10.0:');
        String? newHourlyPrice = stdin.readLineSync();
        while (!inputValidation(
            input: newHourlyPrice, expectedType: ExpectedType.double)) {
          print(
              'Invalid input. Please enter a valid hourly price in \$ (USD). ex: 10.0');
          newHourlyPrice = stdin.readLineSync();
        }
        parkingSpace.hourPrice = double.parse(newHourlyPrice!);
        print('Hourly price updated!');
        return parkingSpace;
      case 3:
        print('Enter the new address:');
        String? newAddress = stdin.readLineSync();
        while (!inputValidation(
            input: newAddress, expectedType: ExpectedType.string)) {
          print('Invalid input. Please enter a valid address.');
          newAddress = stdin.readLineSync();
        }
        parkingSpace.address = newAddress!;
        print('Enter the new hourly price in \$ (USD). ex: 10.0:');
        String? newHourlyPrice = stdin.readLineSync();
        while (!inputValidation(
            input: newHourlyPrice, expectedType: ExpectedType.double)) {
          print(
              'Invalid input. Please enter a valid hourly price \$ (USD). ex: 10.0');
          newHourlyPrice = stdin.readLineSync();
        }
        parkingSpace.hourPrice = double.parse(newHourlyPrice!);
        print('Address and hourly price updated!');
        return parkingSpace;
      case 4:
        return parkingSpace;
      default:
        print('Invalid input. Please enter a number between 1 and 4.');
        return getParkingSpaceAndUpdate(id);
    }
  }

  ParkingSpaceRepository._internal();
}

final ParkingSpaceRepository parkingSpaceRepository = ParkingSpaceRepository();
