import 'package:penguin_parking/models/parking_space.dart';
import 'package:penguin_parking/utils/parkingspaceexploiter.dart';
import '../models/parking.dart';

class ParkingRepository {
  static final ParkingRepository _instance = ParkingRepository._internal();
  List<Parking> currentParkings = [];

  factory ParkingRepository() {
    return _instance;
  }

  ParkingRepository._internal();

  addAndStartParking(newParking) {
    currentParkings.add(newParking);
    print(
        "Added! Plate number: ${newParking.plateNumber} - Owner: ${newParking.owner}");
  }

  double removeParkingOccupantAndFinishParking(plateNumber) {
    DateTime now = DateTime.now();
    Parking? parking =
        currentParkings.singleWhere((x) => x.broom == plateNumber);
    ParkingSpace? parkingSpace = ParkingSpaceRepository()
        .getAllParkingSpaces()
        .singleWhere((x) => x.id == parking.parkingSpace);
    double price =
        parkingSpace.hourPrice * now.difference(parking.startTime).inHours;
    currentParkings.removeWhere((x) => x.broom == plateNumber);
    print('Parking with plate number $plateNumber removed!');
    return price;
  }

  List<Parking> getAllActiveParkings() {
    return currentParkings;
  }
}

final parkingRepository = ParkingRepository();
