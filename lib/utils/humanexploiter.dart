import 'package:penguin_parking/main.dart';
import 'package:penguin_parking/models/human.dart';
import 'package:collection/collection.dart';
import 'package:penguin_parking/utils/validator.dart';
import 'dart:io';

class HumanRepository {
  static final HumanRepository _instance = HumanRepository._internal();
  List<Human> lifeSigns = [];

  factory HumanRepository() {
    return _instance;
  }

  HumanRepository._internal();

  bool addLifesign(Human newLifesign) {
    try {
      Human? exists = lifeSigns.singleWhereOrNull(
          (x) => x.personalNumber == newLifesign.personalNumber);

      if (exists != null) {
        print('Life sign with this personal number already exists!');
        return false;
      } else {
        print('Life sign added!');
        lifeSigns.add(newLifesign);
        return true;
      }
    } catch (e) {
      print('Something went wrong. Please try again.');
      return false;
    }
  }

  void removeLifesign(int personalNumber) {
    lifeSigns
        .removeWhere((element) => element.personalNumber == personalNumber);
    print('Life sign #$personalNumber removed!');
  }

  List<Human> getAllLifeSigns() {
    return lifeSigns;
  }

  Human getLifeSignAndUpdate(int personalNumber) {
    Human? lifeSign =
        lifeSigns.singleWhere((x) => x.personalNumber == personalNumber);
    print('What would you like to update?');
    print('1. Name (${lifeSign.name})');
    print('2. Personal number (${lifeSign.personalNumber})');
    print('3. Both');
    print('4. Exit');

    String? updateChoice = stdin.readLineSync();
    while (
        !inputValidation(input: updateChoice, expectedType: ExpectedType.int)) {
      print('Invalid input. Please enter a number between 1 and 4.');
      updateChoice = stdin.readLineSync();
    }

    switch (int.parse(updateChoice!)) {
      case 1:
        print('Please enter the new name:');
        String? newName = stdin.readLineSync();
        while (!inputValidation(
            input: newName, expectedType: ExpectedType.string)) {
          print('Invalid input. Please enter a valid name.');
          newName = stdin.readLineSync();
        }
        lifeSign.name = newName!;
        return lifeSign;
      case 2:
        print('Please enter the new personal number:');
        String? newPersonalNumber = stdin.readLineSync();
        while (!inputValidation(
            input: newPersonalNumber, expectedType: ExpectedType.int)) {
          print('Invalid input. Please enter a valid personal number.');
          newPersonalNumber = stdin.readLineSync();
        }
        lifeSign.personalNumber = int.parse(newPersonalNumber!);
        return lifeSign;
      case 3:
        print('Please enter the new name:');
        String? newName = stdin.readLineSync();
        while (!inputValidation(
            input: newName, expectedType: ExpectedType.string)) {
          print('Invalid input. Please enter a valid name.');
          newName = stdin.readLineSync();
        }
        lifeSign.name = newName!;
        print('Please enter the new personal number:');
        String? newPersonalNumber = stdin.readLineSync();
        while (!inputValidation(
            input: newPersonalNumber, expectedType: ExpectedType.int)) {
          print('Invalid input. Please enter a valid personal number.');
          newPersonalNumber = stdin.readLineSync();
        }
        lifeSign.personalNumber = int.parse(newPersonalNumber!);
        return lifeSign;
      case 4:
        exitCode = 0;
        break;
      default:
        print('Invalid input. Please enter a number between 1 and 4.');
        getLifeSignAndUpdate(personalNumber);
    }
    return lifeSign;
  }

  Human registerOneBroomToLifeSign(int personalNumber, String plateNumber) {
    Human lifeSign =
        lifeSigns.singleWhere((x) => x.personalNumber == personalNumber);
    lifeSign.broomList.add(plateNumber);
    return lifeSign;
  }

  void applyMockData() {
    try {
      lifeSigns = [
        Human(
            id: '1',
            name: 'Harry Potter',
            personalNumber: 194519929933,
            broomList: ['ABC123']),
        Human(
            id: '2',
            name: 'Ron Weasley',
            personalNumber: 194519929934,
            broomList: ['DEF456']),
        Human(
            id: '3',
            name: 'John Smith',
            personalNumber: 194519929935,
            broomList: ['GHI789']),
        Human(
            id: '4',
            name: 'Hermione Granger',
            personalNumber: 194519929936,
            broomList: ['JKL012']),
      ];
      print('Mock data applied to humans!');
    } catch (e) {
      print('Something went wrong. Please try again.');
      whatToDoNext();
    }
  }
}

final HumanRepository humanRepository = HumanRepository();
