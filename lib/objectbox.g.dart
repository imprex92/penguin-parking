// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;

import 'objectBox/objectBox_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 2895106505521110666),
      name: 'Broom',
      lastPropertyId: const obx_int.IdUid(6, 6231148601853380489),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4698166229573174396),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8603056917466489642),
            name: 'type',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1250451529634176594),
            name: 'brand',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 7966860652952440547),
            name: 'model',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 3000006911049833384),
            name: 'plateNumber',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 6231148601853380489),
            name: 'ownerId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(1, 3893832293609619724),
            relationTarget: 'Human')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 3241333599493169689),
      name: 'Human',
      lastPropertyId: const obx_int.IdUid(3, 1926599540274282453),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5750605337010198308),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4775733589677076979),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1926599540274282453),
            name: 'personalNumber',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'brooms', srcEntity: 'Broom', srcField: 'owner')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 1485723566047156430),
      name: 'Parking',
      lastPropertyId: const obx_int.IdUid(5, 5262063710809240597),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1492954929315570248),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1744510508214583991),
            name: 'broomId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(2, 1609095063182143983),
            relationTarget: 'Broom'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 8389273029862230107),
            name: 'parkingSpace',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 3535554185888350406),
            name: 'startTime',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 5262063710809240597),
            name: 'endTime',
            type: 10,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 8747137452316726021),
      name: 'ParkingSpace',
      lastPropertyId: const obx_int.IdUid(3, 7716191921161776051),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4474802698844643355),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7289835380435068690),
            name: 'address',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 7716191921161776051),
            name: 'hourPrice',
            type: 8,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
obx.Store openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) {
  return obx.Store(getObjectBoxModel(),
      directory: directory,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(4, 8747137452316726021),
      lastIndexId: const obx_int.IdUid(2, 1609095063182143983),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    Broom: obx_int.EntityDefinition<Broom>(
        model: _entities[0],
        toOneRelations: (Broom object) => [object.owner],
        toManyRelations: (Broom object) => {},
        getId: (Broom object) => object.id,
        setId: (Broom object, int id) {
          object.id = id;
        },
        objectToFB: (Broom object, fb.Builder fbb) {
          final typeOffset = fbb.writeString(object.type);
          final brandOffset = fbb.writeString(object.brand);
          final modelOffset = fbb.writeString(object.model);
          final plateNumberOffset = fbb.writeString(object.plateNumber);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, typeOffset);
          fbb.addOffset(2, brandOffset);
          fbb.addOffset(3, modelOffset);
          fbb.addOffset(4, plateNumberOffset);
          fbb.addInt64(5, object.owner.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final typeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final brandParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final modelParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final plateNumberParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, '');
          final object = Broom(
              type: typeParam,
              brand: brandParam,
              model: modelParam,
              plateNumber: plateNumberParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.owner.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.owner.attach(store);
          return object;
        }),
    Human: obx_int.EntityDefinition<Human>(
        model: _entities[1],
        toOneRelations: (Human object) => [],
        toManyRelations: (Human object) => {
              obx_int.RelInfo<Broom>.toOneBacklink(
                      6, object.id, (Broom srcObject) => srcObject.owner):
                  object.brooms
            },
        getId: (Human object) => object.id,
        setId: (Human object, int id) {
          object.id = id;
        },
        objectToFB: (Human object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addInt64(2, object.personalNumber);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final personalNumberParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final object = Human(
              name: nameParam, personalNumber: personalNumberParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          obx_int.InternalToManyAccess.setRelInfo<Human>(
              object.brooms,
              store,
              obx_int.RelInfo<Broom>.toOneBacklink(
                  6, object.id, (Broom srcObject) => srcObject.owner));
          return object;
        }),
    Parking: obx_int.EntityDefinition<Parking>(
        model: _entities[2],
        toOneRelations: (Parking object) => [object.broom],
        toManyRelations: (Parking object) => {},
        getId: (Parking object) => object.id,
        setId: (Parking object, int id) {
          object.id = id;
        },
        objectToFB: (Parking object, fb.Builder fbb) {
          final parkingSpaceOffset = fbb.writeString(object.parkingSpace);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.broom.targetId);
          fbb.addOffset(2, parkingSpaceOffset);
          fbb.addInt64(3, object.startTime.millisecondsSinceEpoch);
          fbb.addInt64(4, object.endTime?.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final endTimeValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12);
          final parkingSpaceParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, '');
          final startTimeParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0));
          final endTimeParam = endTimeValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(endTimeValue);
          final object = Parking(
              parkingSpace: parkingSpaceParam,
              startTime: startTimeParam,
              endTime: endTimeParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.broom.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          object.broom.attach(store);
          return object;
        }),
    ParkingSpace: obx_int.EntityDefinition<ParkingSpace>(
        model: _entities[3],
        toOneRelations: (ParkingSpace object) => [],
        toManyRelations: (ParkingSpace object) => {},
        getId: (ParkingSpace object) => object.id,
        setId: (ParkingSpace object, int id) {
          object.id = id;
        },
        objectToFB: (ParkingSpace object, fb.Builder fbb) {
          final addressOffset = fbb.writeString(object.address);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, addressOffset);
          fbb.addFloat64(2, object.hourPrice);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final addressParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final hourPriceParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final object = ParkingSpace(
              address: addressParam, hourPrice: hourPriceParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Broom] entity fields to define ObjectBox queries.
class Broom_ {
  /// See [Broom.id].
  static final id = obx.QueryIntegerProperty<Broom>(_entities[0].properties[0]);

  /// See [Broom.type].
  static final type =
      obx.QueryStringProperty<Broom>(_entities[0].properties[1]);

  /// See [Broom.brand].
  static final brand =
      obx.QueryStringProperty<Broom>(_entities[0].properties[2]);

  /// See [Broom.model].
  static final model =
      obx.QueryStringProperty<Broom>(_entities[0].properties[3]);

  /// See [Broom.plateNumber].
  static final plateNumber =
      obx.QueryStringProperty<Broom>(_entities[0].properties[4]);

  /// See [Broom.owner].
  static final owner =
      obx.QueryRelationToOne<Broom, Human>(_entities[0].properties[5]);
}

/// [Human] entity fields to define ObjectBox queries.
class Human_ {
  /// See [Human.id].
  static final id = obx.QueryIntegerProperty<Human>(_entities[1].properties[0]);

  /// See [Human.name].
  static final name =
      obx.QueryStringProperty<Human>(_entities[1].properties[1]);

  /// See [Human.personalNumber].
  static final personalNumber =
      obx.QueryIntegerProperty<Human>(_entities[1].properties[2]);

  /// see [Human.brooms]
  static final brooms = obx.QueryBacklinkToMany<Broom, Human>(Broom_.owner);
}

/// [Parking] entity fields to define ObjectBox queries.
class Parking_ {
  /// See [Parking.id].
  static final id =
      obx.QueryIntegerProperty<Parking>(_entities[2].properties[0]);

  /// See [Parking.broom].
  static final broom =
      obx.QueryRelationToOne<Parking, Broom>(_entities[2].properties[1]);

  /// See [Parking.parkingSpace].
  static final parkingSpace =
      obx.QueryStringProperty<Parking>(_entities[2].properties[2]);

  /// See [Parking.startTime].
  static final startTime =
      obx.QueryDateProperty<Parking>(_entities[2].properties[3]);

  /// See [Parking.endTime].
  static final endTime =
      obx.QueryDateProperty<Parking>(_entities[2].properties[4]);
}

/// [ParkingSpace] entity fields to define ObjectBox queries.
class ParkingSpace_ {
  /// See [ParkingSpace.id].
  static final id =
      obx.QueryIntegerProperty<ParkingSpace>(_entities[3].properties[0]);

  /// See [ParkingSpace.address].
  static final address =
      obx.QueryStringProperty<ParkingSpace>(_entities[3].properties[1]);

  /// See [ParkingSpace.hourPrice].
  static final hourPrice =
      obx.QueryDoubleProperty<ParkingSpace>(_entities[3].properties[2]);
}
